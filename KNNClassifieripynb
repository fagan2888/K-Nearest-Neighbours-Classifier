{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "from math import sqrt\n",
    "import warnings\n",
    "\n",
    "import matplotlib.pyplot as plt \n",
    "from matplotlib import style\n",
    "\n",
    "from collections import Counter\n",
    "import random\n",
    "import pandas as pd\n",
    "from sklearn.cross_validation import cross_val_score\n",
    "from sklearn.cross_validation import train_test_split\n",
    "from sklearn import preprocessing, cross_validation, neighbors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def load_input_data():\n",
    "    df = pd.read_csv(\"breastCancer.csv\")\n",
    "    df.replace (\"?\", -9999, inplace = True)\n",
    "    df.drop ([\"id\"], 1, inplace = True)\n",
    "    input_data = df.astype(float).values.tolist()\n",
    "    random.shuffle(input_data)\n",
    "\n",
    "    return input_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We first import the required dataset into the dataframe and drop the attribute \"id\" as it has no bearing on our algorithm. We also try to replace garbage values with \"?\". This would be the required preprocessing and data cleansing. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def KNearestNeighbors(input, reading, kvalue):\n",
    "    distances = []\n",
    "    for iterator in input:\n",
    "        for feature in input[iterator]:\n",
    "            EuclideanDistance = np.linalg.norm(np.array(feature) - np.array(reading))\n",
    "            distances.append([EuclideanDistance,iterator])\n",
    "        votes = [i[1] for i in sorted(distances)[:kvalue]]\n",
    "        votes_result = Counter(votes).most_common(1)[0][0]\n",
    "        confidence = Counter(votes).most_common(1)[0][1]/kvalue\n",
    "\n",
    "    return votes_result, confidence"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we need to write the predict method which must do the following: it needs to compute the euclidean distance between the “new” observation and all the data points in the training set. It must then select the K nearest ones and perform a majority vote. It then assigns the corresponding label to the observation. Let’s go ahead and write that.\n",
    "\n",
    "In the above code, we create an array of distances which we sort by increasing order. That way, we can grab the K nearest neighbors (first K distances), get their associated labels which we store in the targets array, and finally perform a majority vote using a Counter and also get the confidence on the vote."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def test_train_KNN(k):\n",
    "    \n",
    "    full_data = load_input_data()\n",
    "    test_size = 0.2\n",
    "    train_set = {2: [], 4: []}  # Class: (2 for benign, 4 for malignant)\n",
    "    test_set = {2: [], 4: []}  # Class: (2 for benign, 4 for malignant)\n",
    "    train_data = full_data[:-int(test_size * len(full_data))]  # 80% of the data\n",
    "    test_data = full_data[-int(test_size * len(full_data)):]  # 20% of the data\n",
    "\n",
    "    for entry in train_data:\n",
    "        train_set[entry[-1]].append(entry[:-1])  \n",
    "    \n",
    "    for entry in test_data:\n",
    "        test_set[entry[-1]].append(entry[:-1])\n",
    "    \n",
    "    correct = 0\n",
    "    total = 0\n",
    "    for group in test_set:\n",
    "        for data in test_set[group]:\n",
    "            vote, confidence = KNearestNeighbors(train_set, data, k)\n",
    "            if group == vote:\n",
    "                correct += 1\n",
    "            total += 1\n",
    "    \n",
    "    Accuracy = correct / total\n",
    "    \n",
    "    return Accuracy\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Putting it all together, we can define the function KNearestNeighbor, which loops over every test example and makes a prediction. In the above code, we do the basic test split and after experimentation I found that, 80% train data and 20% test sata to be the ideal split for the same. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x111707b70>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "k_range = list(range(1,10))\n",
    "k_scores = []\n",
    "\n",
    "for k in k_range:\n",
    "    k_scores.append(test_train_KNN(k))\n",
    "\n",
    "plt.plot(k_range, k_scores)\n",
    "plt.xlabel('Value of K for KNN')\n",
    "plt.ylabel('Accuracy')\n",
    "plt.ticklabel_format(style='plain',axis='x',useOffset=False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The above graph shows us the the accuracy for different values of K in the range of 1-20 points. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def scikitlearn_KNN():\n",
    "    df = pd.read_csv(\"breastCancer.csv\")\n",
    "    df.replace (\"?\", -9999, inplace = True)\n",
    "    df.drop ([\"id\"], 1, inplace = True)\n",
    "    input_data = df.astype(float).values.tolist()\n",
    "    random.shuffle(input_data)\n",
    "    \n",
    "    X = np.array(df.drop(['class'],1)) #creates features\n",
    "    y = np.array(df['class']) #creates labels\n",
    "\n",
    "    X_train, X_test, y_train, y_test = cross_validation.train_test_split(X,y,test_size=0.2)\n",
    "\n",
    "    clf = neighbors.KNeighborsClassifier()\n",
    "    clf.fit(X_train,y_train)\n",
    "\n",
    "    accuracy = clf.score(X_test,y_test)\n",
    "    print(accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.971428571429\n"
     ]
    }
   ],
   "source": [
    "scikitlearn_KNN()"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "Here is a similar implmentation of KNN with cross validation using KNNClassifier in scikitlearn. So for k = 10 we find that k = 5 is the optimal solution"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
